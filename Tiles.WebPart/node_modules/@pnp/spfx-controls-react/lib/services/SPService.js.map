{"version":3,"sources":["services/SPService.ts"],"names":[],"mappings":";;AAAA,2CAAqE;AAIrE,8CAAwE;AAExE;IAEE,mBAAoB,QAAuD;QAAvD,aAAQ,GAAR,QAAQ,CAA+C;IAAG,CAAC;IAE/E;;;OAGG;IACI,2BAAO,GAAd,UAAe,OAAsB;QACnC,IAAI,QAAiB,CAAC;QACtB,IAAI,QAAQ,GAAc,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,kDAA+C,CAAC;QAEnH,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;YACpB,QAAQ,IAAI,gBAAa,OAAO,CAAC,OAAO,KAAK,wBAAW,CAAC,EAAE,GAAG,IAAI,GAAE,OAAO,CAAE,CAAC;QAChF,CAAC;QAED,EAAE,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;YACzB,QAAQ,IAAI,8BAA4B,OAAO,CAAC,YAAc,CAAC;YAC/D,QAAQ,GAAG,IAAI,CAAC;QAClB,CAAC;QAED,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,KAAK,KAAK,CAAC,CAAC,CAAC;YACpC,QAAQ,IAAI,QAAQ,GAAG,sBAAsB,GAAG,0BAA0B,CAAC;YAC3E,QAAQ,GAAG,IAAI,CAAC;QAClB,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,sBAAY,CAAC,cAAc,CAAC,EAAE,CAAC;aAC9E,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAsB,CAAC;IAC1D,CAAC;IACH,gBAAC;AAAD,CA7BA,AA6BC,IAAA","file":"services/SPService.js","sourcesContent":["import { ISPService, ILibsOptions, LibsOrderBy } from \"./ISPService\";\nimport { ISPLists } from \"../common/SPEntities\";\nimport { WebPartContext } from \"@microsoft/sp-webpart-base\";\nimport { ApplicationCustomizerContext } from '@microsoft/sp-application-base';\nimport { SPHttpClient, SPHttpClientResponse } from \"@microsoft/sp-http\";\n\nexport default class SPService implements ISPService {\n\n  constructor(private _context: WebPartContext | ApplicationCustomizerContext) {}\n\n  /**\n   * Get lists or libraries\n   * @param options\n   */\n  public getLibs(options?: ILibsOptions): Promise<ISPLists> {\n    let filtered: boolean;\n    let queryUrl: string = `${this._context.pageContext.web.absoluteUrl}/_api/web/lists?$select=Title,id,BaseTemplate`;\n\n    if (options.orderBy) {\n      queryUrl += `&$orderby=${options.orderBy === LibsOrderBy.Id ? 'Id': 'Title'}`;\n    }\n\n    if (options.baseTemplate) {\n      queryUrl += `&$filter=BaseTemplate eq ${options.baseTemplate}`;\n      filtered = true;\n    }\n\n    if (options.includeHidden === false) {\n      queryUrl += filtered ? ' and Hidden eq false' : '&$filter=Hidden eq false';\n      filtered = true;\n    }\n\n    return this._context.spHttpClient.get(queryUrl, SPHttpClient.configurations.v1)\n    .then(response => response.json()) as Promise<ISPLists>;\n  }\n}\n"],"sourceRoot":"../../src"}